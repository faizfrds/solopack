datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique

  createdLocation Location[] @relation("CreatedBy")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String?        @unique

  Post          Post[]
  Comments      Comment[]
  Vote          Vote[]
  CommentVote   CommentVote[]
  Subscription  Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id          String         @id @default(cuid())
  name        String         
  state       String?
  country     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  posts       Post[]
  creatorId   String?
  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]
  userId      String?

  @@unique([name, state, country])
  @@index([name])
}

model Subscription {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  @@id([userId, locationId])
}

model Post {
  id         String    @id @default(cuid())
  title      String
  content    Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  location   Location  @relation(fields: [locationId], references: [id])
  locationId String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  comments   Comment[]
  votes       Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
}
